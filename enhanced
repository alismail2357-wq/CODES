Sub ColorCompareWithFixedPath()
    Dim originSheet As Worksheet
    Dim wbExternal As Workbook
    Dim greenSheet As Worksheet
    Dim filePath As String
    Dim lastRow As Long, greenLastRow As Long
    Dim i As Long
    Dim cleanedU As String, cleanedV As String
    Dim greenKey As String
    Dim approvedPairs As Object
    Dim freqDict As Object, repeatedValues As Object
    Dim cellU As Range, cellV As Range, cellT As Range, cellN As Range
    Dim valT As String, valN As String

    ' ‚úÖ Set the working sheet by name (adjust if needed)
    On Error Resume Next
    Set originSheet = ThisWorkbook.Sheets("Sheet1") ' Replace with your actual sheet name
    On Error GoTo 0

    If originSheet Is Nothing Then
        MsgBox "‚ùå Sheet 'Sheet1' not found. Please check the sheet name.", vbCritical
        Exit Sub
    End If

    ' ‚úÖ Set fixed file path for the external Excel file
    filePath = "C:\Path\To\adresse.xlsx" ' <<=== UPDATE THIS to the real path

    If Dir(filePath) = "" Then
        MsgBox "üö´ File not found: " & filePath, vbCritical
        Exit Sub
    End If

    ' ‚úÖ Initialize
    Set approvedPairs = CreateObject("Scripting.Dictionary")
    Set freqDict = CreateObject("Scripting.Dictionary")
    Set repeatedValues = CreateObject("Scripting.Dictionary")

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo CleanFail

    ' ‚úÖ Open the external workbook and read green pairs
    Set wbExternal = Workbooks.Open(filePath, ReadOnly:=True)
    Set greenSheet = wbExternal.Sheets(1)

    greenLastRow = greenSheet.Cells(greenSheet.Rows.Count, "A").End(xlUp).Row

    For i = 1 To greenLastRow
        cleanedU = CleanText(Trim(greenSheet.Cells(i, "A").Value))
        cleanedV = CleanText(Trim(greenSheet.Cells(i, "B").Value))
        greenKey = cleanedU & "|" & cleanedV
        If cleanedU <> "" And cleanedV <> "" Then
            approvedPairs(greenKey) = True
        End If
    Next i

    wbExternal.Close SaveChanges:=False

    ' ‚úÖ Find last row based on columns T, U, V, N
    lastRow = originSheet.Cells(originSheet.Rows.Count, "N").End(xlUp).Row
    lastRow = Application.WorksheetFunction.Max(lastRow, _
               originSheet.Cells(originSheet.Rows.Count, "U").End(xlUp).Row, _
               originSheet.Cells(originSheet.Rows.Count, "V").End(xlUp).Row, _
               originSheet.Cells(originSheet.Rows.Count, "T").End(xlUp).Row)

    ' ‚úÖ Count frequency of values in column N
    For i = 1 To lastRow
        valN = Trim(UCase(originSheet.Cells(i, "N").Value))
        If valN <> "" Then
            If freqDict.Exists(valN) Then
                freqDict(valN) = freqDict(valN) + 1
            Else
                freqDict.Add valN, 1
            End If
        End If
    Next i

    ' ‚úÖ Store values that appear 2 or more times
    Dim k As Variant
    For Each k In freqDict.Keys
        If freqDict(k) >= 2 Then
            repeatedValues(k) = True
        End If
    Next k

    ' ‚úÖ Color column N values appearing 2+ times
    For i = 1 To lastRow
        Set cellN = originSheet.Cells(i, "N")
        valN = Trim(UCase(cellN.Value))
        If valN <> "" And repeatedValues.Exists(valN) Then
            cellN.Interior.Color = RGB(144, 238, 144) ' Light green
        Else
            cellN.Interior.ColorIndex = xlColorIndexNone ' No fill
        End If
    Next i

    ' ‚úÖ Apply coloring logic for U and V
    For i = 1 To lastRow
        Set cellU = originSheet.Cells(i, "U")
        Set cellV = originSheet.Cells(i, "V")
        Set cellT = originSheet.Cells(i, "T")

        cleanedU = CleanText(Trim(cellU.Value))
        cleanedV = CleanText(Trim(cellV.Value))
        greenKey = cleanedU & "|" & cleanedV
        valT = LCase(Trim(cellT.Value))

        If approvedPairs.Exists(greenKey) Then
            ' From external list ‚Üí green
            cellU.Interior.Color = RGB(144, 238, 144)
            cellV.Interior.Color = RGB(144, 238, 144)
        ElseIf valT <> "algeria" And valT <> "dz" And valT <> "alg√©rie" Then
            ' If not Algeria ‚Üí blue
            cellU.Interior.Color = RGB(0, 112, 192)
            cellV.Interior.Color = RGB(0, 112, 192)
        ElseIf cleanedU = cleanedV Then
            ' Algeria AND U = V ‚Üí green
            cellU.Interior.Color = RGB(144, 238, 144)
            cellV.Interior.Color = RGB(144, 238, 144)
        Else
            ' Algeria AND U ‚â† V ‚Üí gold
            cellU.Interior.Color = RGB(255, 215, 0)
            cellV.Interior.Color = RGB(255, 215, 0)
        End If
    Next i

CleanUp:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    MsgBox "‚úÖ Done!"
    Exit Sub

CleanFail:
    MsgBox "‚ùå Error: " & Err.Description, vbCritical
    Resume CleanUp
End Sub

' ‚úÖ Text cleaner for comparison
Function CleanText(txt As String) As String
    Dim cleaned As String
    Dim i As Long, ch As String
    cleaned = LCase(txt)

    ' Replace accents
    cleaned = Replace(cleaned, "√©", "e")
    cleaned = Replace(cleaned, "√®", "e")
    cleaned = Replace(cleaned, "√™", "e")
    cleaned = Replace(cleaned, "√†", "a")
    cleaned = Replace(cleaned, "√°", "a")
    cleaned = Replace(cleaned, "√¢", "a")
    cleaned = Replace(cleaned, "√ß", "c")
    cleaned = Replace(cleaned, "√¥", "o")
    cleaned = Replace(cleaned, "√∂", "o")
    cleaned = Replace(cleaned, "√π", "u")
    cleaned = Replace(cleaned, "√ª", "u")
    cleaned = Replace(cleaned, "√º", "u")
    cleaned = Replace(cleaned, "√≠", "i")
    cleaned = Replace(cleaned, "√Ø", "i")
    cleaned = Replace(cleaned, "√±", "n")

    ' Remove all non-alphanumeric characters
    Dim result As String
    result = ""
    For i = 1 To Len(cleaned)
        ch = Mid(cleaned, i, 1)
        If ch Like "[a-z0-9]" Then
            result = result & ch
        End If
    Next i

    CleanText = result
End Function
